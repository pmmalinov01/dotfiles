" Nice menu when typing `:find *.py`
set wildmode=longest,list,full
set wildmenu
" Ignore files
set wildignore+=*.pyc
set wildignore+=**/ios/*
set wildignore+=**/.git/*


call plug#begin('~/.vim/plugged')
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/nvim-cmp'
Plug 'nvim-lualine/lualine.nvim'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'gruvbox-community/gruvbox'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'saadparwaiz1/cmp_luasnip'
Plug 'L3MON4D3/LuaSnip'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }
Plug 'fatih/vim-go'
Plug 'hashivim/vim-terraform'

" Function Signature improvement
Plug 'ray-x/lsp_signature.nvim'

call plug#end()
" Telescop find_files
nnoremap <leader>ff <cmd>Telescope find_files<cr>
" Telescop live_grep
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
" Telescop buffers
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

filetype on
filetype plugin on
filetype indent on

syntax on
" VisualBell, no sound
set vb
set ruler
set spelllang=en_us
"set autoindent
"set colorcolumn=80
set mouse=a
"
" " No more Arrow Keys, deal with it
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

colorscheme gruvbox
set background=dark
let g:gruvbox_invert_selection='0'
set tabstop     =2
set softtabstop =2
set shiftwidth  =2
set expandtab

" Turn hybrid line numbers on
set number relativenumber
set nu rnu

lua << EOF
  vim.cmd([[silent! autocmd! filetypedetect BufRead,BufNewFile *.tf]])
  vim.cmd([[autocmd BufRead,BufNewFile *.hcl set filetype=hcl]])
  vim.cmd([[autocmd BufRead,BufNewFile .terraformrc,terraform.rc set filetype=hcl]])
  vim.cmd([[autocmd BufRead,BufNewFile *.tf,*.tfvars set filetype=terraform]])
  vim.cmd([[autocmd BufRead,BufNewFile *.tfstate,*.tfstate.backup set filetype=json]])
  vim.cmd([[let g:terraform_fmt_on_save=1]])
  vim.cmd([[let g:terraform_align=1]])
EOF

lua << EOF
  local custom_on_attach = function (client)
    require'lsp_signature'.on_attach()
  end
EOF

lua << EOF
  require "lsp_signature".setup({
    bind = true, -- This is mandatory, otherwise border config won't get registered.
    handler_opts = {
      border = "shadow"
    }
  })
EOF
lua <<EOF
  -- Setup nvim-cmp.
  local luasnip = require'luasnip'
  local cmp = require'cmp'

  cmp.setup({
    snippet = {
      expand = function(args)
        -- For `vsnip` user.
--        vim.fn["vsnip#anonymous"](args.body)

        -- For `luasnip` user.
        require('luasnip').lsp_expand(args.body)

        -- For `ultisnips` user.
        -- vim.fn["UltiSnips#Anon"](args.body)
      end,
    },
    mapping = {
      ['<C-d>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.close(),
      ['<CR>'] = cmp.mapping.confirm({ select = true }),
    },
    sources = {
      { name = 'nvim_lsp' },

      -- For vsnip user.
--      { name = 'vsnip' },

      -- For luasnip user.
      { name = 'luasnip' },

      -- For ultisnips user.
      -- { name = 'ultisnips' },

      { name = 'buffer' },
    }
  })

  -- Setup lspconfig.
  require('lspconfig').ansiblels.setup {
    on_attach = on_attach
  }
  require('lspconfig').bashls.setup {
    on_attach = on_attach
  }
  require('lspconfig').gopls.setup {
    on_attach = custom_on_attach
  }
  require('lualine').setup {
    options = {
      icons_enabled = true,
      theme = 'gruvbox'
    },
  }
  require'lspconfig'.tflint.setup{}
  require('lspconfig').dockerls.setup {
    on_attach = on_attach
  }
  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true
  require('lspconfig').terraformls.setup({
    on_attach = on_attach,
    flags = { debounce_text_changes = 150 },
    capabilities = capabilities,
  })
EOF
autocmd BufWritePre *.tf lua vim.lsp.buf.formatting()
autocmd BufRead,BufNewFile *.hcl set filetype=hcl
autocmd BufRead,BufNewFile .terraformrc,terraform.rc set filetype=hcl
autocmd BufRead,BufNewFile *.tf,*.tfvars set filetype=terraform
autocmd BufRead,BufNewFile *.tfstate,*.tfstate.backup set filetype=json

